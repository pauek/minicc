Keywords
--------

typedef_name:
   ident
namespace_name:
   original_namespace_name
   namespace_alias
original_namespace_name:
   ident
namespace_alias:
   ident
class_name:
   ident
   templ_id
enum_name:
   ident
templ_name:
   ident

Note that a typedef_name naming a class is also a class_name.

Lexical conventions
-------------------

hex_quad:
   hex_digit hex_digit hex_digit hex_digit
universal_char_name:
   "\u" hex_quad
   "\U" hex_quad hex_quad
preprocessing_token:
   header_name
   ident
   pp_number
   char_lit
   string_lit
   preprocessing_op_or_punc
   each non_white_space char that can't be one of the above
token:
   ident
   keyword
   lit
   operator
   punctuator
header_name:
   "<" h_char_seq ">"
   '"' q_char_seq '"'
h_char_seq:
   h_char
   h_char_seq h_char
h_char:
   anything except new_line and '>'
q_char_seq:
   q_char
   q_char_seq q_char
q_char:
   anything except new_line and '"'
pp_number:
   digit
   "." digit
   pp_number digit
   pp_number nondigit
   pp_number "e" sign
   pp_number "E" sign
   pp_number "."
ident:
   nondigit
   ident nondigit
   ident digit
nondigit: one of
   universal_char_name
   _ a b c d e f g h i j k l m
     n o p q r s t u v w x y z
     A B C D E F G H I J K L M
     N O P Q R S T U V W X Y Z
digit: one of
   0 1 2 3 4 5 6 7 8 9
preprocessing_op_or_punc: one of
   "{"  "}"  "["  "]"  "#"  "##"  "("  ")"
   "<:"  ":>"  "<%"  "%>"  "%:"  "%:%:"  ";"  ":"  "..."
   "new"  "delete"  "?"  "::"  "."  ".*"
   "+"  "-"  "*"  "/"  "%"  "^"  "&"  "|"  "~"
   "!"  "="  "<"  ">"  "+="  "-="  "*="  "/="  "%="
   "^="  "&="  "|="  "<<"  ">>"  ">>="  "<<="  "=="  "!="
   "<="  ">="  "&&"  "||"  "++"  "--"  ","  "->*"  "->"
   "and"  "and_eq"  "bitand"  "bitor"  "compl"  
   "not"  "not_eq"  "or"  "or_eq"  "xor"  "xor_eq"
lit:
   integer_lit
   char_lit
   floating_lit
   string_lit
   boolean_lit
integer_lit:
   decimal_lit [integer_suffix]
   octal_lit [integer_suffix]
   hex_lit [integer_suffix]
decimal_lit:
   nonzero_digit
   decimal_lit digit
octal_lit:
   "0"
   octal_lit octal_digit
hex_lit:
   "0x" hex_digit
   "0X" hex_digit
   hex_lit hex_digit
nonzero_digit: one of
   1  2  3  4  5  6  7  8  9
octal_digit: one of
   0  1  2  3  4  5  6  7
hex_digit: one of
   0  1  2  3  4  5  6  7  8  9
   a  b  c  d  e  f
   A  B  C  D  E  F
integer_suffix:
   unsigned_suffix [long_suffix]
   long_suffix [unsigned_suffix]
unsigned_suffix: one of
   "u"  "U"
long_suffix: one of
   "l"  "L"
char_lit:
   "'" c_char_seq "'"
   "L" "'" c_char_seq "'"
c_char_seq:
   c_char
   c_char_seq c_char
c_char:
   anything except the single_quote ', backslash \, or '\n'
   escape_seq
   universal_char_name
escape_seq:
   simple_escape_seq
   octal_escape_seq
   hex_escape_seq
simple_escape_seq: one of
   \'  \"  \?  \\
   \a  \b  \f  \n  \r  \t  \v
octal_escape_seq:
   "\" octal_digit
   "\" octal_digit octal_digit
   "\" octal_digit octal_digit octal_digit
hex_escape_seq:
   "\x" hex_digit
   hex_escape_seq hex_digit
floating_lit:
   fractional_const [exponent_part] [floating_suffix]
   digit_seq exponent_part [floating_suffix]
fractional_const:
   [digit_seq] "." digit_seq
   digit_seq "."
exponent_part:
   "e" [sign] digit_seq
   "E" [sign] digit_seq
sign: one of
   "+"  "-"
digit_seq:
   digit
   digit_seq digit
floating_suffix: one of
   "f"  "l"  "F"  "L"
string_lit:
   "[s_char_seq]"
   L"[s_char_seq]"
s_char_seq:
   s_char
   s_char_seq s_char
s_char:
   anything except the double_quote ", backslash \, or '\n'
   escape_seq
   universal_char_name
boolean_lit:
   "false"
   "true"

Basic Concepts
--------------

translation_unit:
   [declaration_seq]

Expressions
-----------

primary_expr:
   lit
   "this"
   "::" ident
   "::" operator_func_id
   "::" qualfd_id
   "(" expr ")"
   id_expr
id_expr:
   unqualfd_id
   qualfd_id
unqualfd_id:
   ident
   operator_func_id
   conversion_func_id
   "~" class_name
   templ_id
qualfd_id:
   nested_name_spec ["template"] unqualfd_id
nested_name_spec:
   class_or_namespace_name "::" [nested_name_spec]
   class_or_namespace_name "::" "template" nested_name_spec	
         // DW See qualfd_id above re "template"
class_or_namespace_name:
   class_name
   namespace_name
postfix_expr:
   primary_expr
   postfix_expr    "[" expr "]"
   postfix_expr    "(" [expr_list] ")"
   simple_type_spec "(" [expr_list] ")"
   typename ["::"] nested_name_spec ident "(" [expr_list] ")"
   typename ["::"] nested_name_spec ["template"] templ_id \
      "(" [expr_list] ")"

   postfix_expr "."  ["template"] ["::"] id_expr
   postfix_expr "->" ["template"] ["::"] id_expr
   postfix_expr "."  pseudo_destructor_name
   postfix_expr "->" pseudo_destructor_name
   postfix_expr "++"
   postfix_expr "--"
   "dynamic_cast"     "<" type_id ">" "(" expr ")"
   "static_cast"      "<" type_id ">" "(" expr ")"
   "reinterpret_cast" "<" type_id ">" "(" expr ")"
   "const_cast"       "<" type_id ">" "(" expr ")"
   typeid "(" expr ")"
   typeid "(" type_id ")"
expr_list:
   assign_expr
   expr_list "," assign_expr
pseudo_destructor_name:
   ["::"] [nested_name_spec] type_name "::" "~" type_name
   ["::"] nested_name_spec "template" templ_id "::" "~" type_name
   ["::"] [nested_name_spec] "~" type_name
unary_expr:
   postfix_expr
   "++" cast_expr
   "--" cast_expr
   unary_operator cast_expr
   "sizeof" unary_expr
   "sizeof" "(" type_id ")"
   new_expr
   delete_expr
unary_operator: one of
   "*"  "&"  "+"  "-"  "!"  "~"
new_expr:
   ["::"] "new" [new_placement] new_type_id [new_initzer]
   ["::"] "new" [new_placement] "(" type_id ")" [new_initzer]
new_placement:
   "(" expr_list ")"
new_type_id:
   type_spec_seq [new_declarator]
new_declarator:
   ptr_operator [new_declarator]
   direct_new_declarator
direct_new_declarator:
   "[" expr "]"
   direct_new_declarator "[" const_expr "]"
new_initzer:
   "(" [expr_list] ")"
delete_expr:
   ["::"] "delete" cast_expr
   ["::"] "delete" "[" "]" cast_expr
cast_expr:
   unary_expr
   "(" type_id ")" cast_expr
pm_expr:
   cast_expr
   pm_expr ".*" cast_expr
   pm_expr "->*" cast_expr
multiplicative_expr:
   pm_expr
   multiplicative_expr "*" pm_expr
   multiplicative_expr "/" pm_expr
   multiplicative_expr "%" pm_expr
additive_expr:
   multiplicative_expr
   additive_expr "+" multiplicative_expr
   additive_expr "-" multiplicative_expr
shift_expr:
   additive_expr
   shift_expr "<<" additive_expr
   shift_expr ">>" additive_expr
relational_expr:
   shift_expr
   relational_expr "<" shift_expr
   relational_expr ">" shift_expr
   relational_expr "<=" shift_expr
   relational_expr ">=" shift_expr
equality_expr:
   relational_expr
   equality_expr "==" relational_expr
   equality_expr "!=" relational_expr
and_expr:
   equality_expr
   and_expr "&" equality_expr
exclusive_or_expr:
   and_expr
   exclusive_or_expr "^" and_expr
inclusive_or_expr:
   exclusive_or_expr
   inclusive_or_expr "|" exclusive_or_expr
logical_and_expr:
   inclusive_or_expr
   logical_and_expr "&&" inclusive_or_expr
logical_or_expr:
   logical_and_expr
   logical_or_expr "||" logical_and_expr
conditional_expr:
   logical_or_expr
   logical_or_expr "?" expr ":" assign_expr
assign_expr:
   conditional_expr
   logical_or_expr assign_operator assign_expr
   throw_expr
assign_operator: one of
   "="  "*="  "/="  "%="  "+="  "-="  ">>="  "<<="  
   "&="  "^="  "|="
expr:
   assign_expr
   expr "," assign_expr
const_expr:
   conditional_expr

Statements
----------

stmt:
   labeled_stmt
   expr_stmt
   compound_stmt
   selection_stmt
   iter_stmt
   jump_stmt
   declaration_stmt
   try_block
labeled_stmt:
   ident ":" stmt
   "case" const_expr ":" stmt
   "default" ":" stmt
expr_stmt:
   [expr] ";"
compound_stmt:
   "{" [stmt_seq] "}"
stmt_seq:
   stmt
   stmt_seq stmt
selection_stmt:
   "if" "(" condition ")" stmt
   "if" "(" condition ")" stmt "else" stmt
   "switch" "(" condition ")" stmt
condition:
   expr
   type_spec_seq declarator "=" assign_expr
iter_stmt:
   while "(" condition ")" stmt
   "do" stmt "while" "(" expr ")" ";"
   "for" "(" for_init_stmt [condition] ";" [expr] ")" stmt
for_init_stmt:
   expr_stmt
   simple_declaration
jump_stmt:
   "break" ";"
   "continue" ";"
   "return" [expr] ";"
   "goto" ident ";"
declaration_stmt:
   block_declaration

Declarations
------------

declaration_seq:
   declaration
   declaration_seq declaration
declaration:
   block_declaration
   func_def
   templ_decl
   explicit_instantiation
   explicit_specialization
   linkage_specification
   namespace_def
block_declaration:
   simple_declaration
   asm_def
   namespace_alias_def
   using_declaration
   using_directive
simple_declaration:
   [decl_spec_seq] [init_declarator_list] ";"
decl_spec_seq:
   [decl_spec_seq] decl_spec
decl_spec:
   storage_class_spec
   type_spec
   func_spec
   "friend"
   "typedef"
storage_class_spec:
   "auto"
   "register"
   "static"
   "extern"
   "mutable"
func_spec:
   "inline"
   "virtual"
   "explicit"
typedef_name:
   ident
type_spec:
   simple_type_spec
   class_spec
   enum_spec
   elaborated_type_spec
   cv_qualifier
simple_type_spec:
   ["::"] [nested_name_spec] type_name
   ["::"] nested_name_spec ["template"] templ_id
   "char"
   "wchar_t"
   "bool"
   "short"
   "int"
   "long"
   "signed"
   "unsigned"
   "float"
   "double"
   "void"
type_name:
   class_name
   enum_name
   typedef_name
elaborated_type_spec:
   class_key ["::"] [nested_name_spec] ident
   class_key ["::"] [nested_name_spec] [templ] templ_id
   "enum" ["::"] [nested_name_spec] ident
   "typename" ["::"] nested_name_spec ident
   "typename" ["::"] nested_name_spec [templ] templ_id
enum_name:
   ident
enum_spec:
   "enum" [ident] "{" [enumerator_list] "}"
enumerator_list:
   enumerator_def
   enumerator_list "," enumerator_def
enumerator_def:
   enumerator
   enumerator "=" const_expr
enumerator:
   ident
namespace_name:
   original_namespace_name
   namespace_alias
original_namespace_name:
   ident
namespace_def:
   named_namespace_def
   unnamed_namespace_def
named_namespace_def:
   original_namespace_def
   extension_namespace_def
original_namespace_def:
   namespace ident "{" namespace_body "}"
extension_namespace_def:
   namespace original_namespace_name  "{" namespace_body "}"
unnamed_namespace_def:
   namespace "{" namespace_body "}"
namespace_body:
   [declaration_seq]
namespace_alias:
   ident
namespace_alias_def:
   namespace ident "=" qualfd_namespace_spec ";"
qualfd_namespace_spec:
   ["::"] [nested_name_spec] namespace_name
using_declaration:
   using [typename] ["::"] nested_name_spec unqualfd_id ";"
   using "::" unqualfd_id ";"
using_directive:
   "using" "namespace" ["::"] [nested_name_spec] \
      namespace_name ";"

asm_def:
   "asm" "(" string_lit ")" ";"
linkage_specification:
   "extern" string_lit "{" [declaration_seq] "}"
   "extern" string_lit declaration

Declarators
-----------

init_declarator_list:
   init_declarator
   init_declarator_list "," init_declarator
init_declarator:
   declarator [initzer]
declarator:
   ptr_operator declarator
   direct_declarator
direct_declarator:
   declarator_id
   direct_declarator "(" param_decl_clause ")" \
      [cv_qualifier_seq] [exception_specification]

   direct_declarator "[" [const_expr] "]"
   "(" declarator ")"
ptr_operator:
   "*" [cv_qualifier_seq]
   "&"
   ["::"] nested_name_spec "*" [cv_qualifier_seq]
cv_qualifier_seq:
   cv_qualifier [cv_qualifier_seq]
cv_qualifier:
   "const"
   "volatile"
declarator_id:
   ["::"] id_expr
   ["::"] [nested_name_spec] type_name
type_id:
   type_spec_seq [abstract_declarator]
type_spec_seq:
   type_spec [type_spec_seq]
abstract_declarator:
   ptr_operator [abstract_declarator]
   direct_abstract_declarator
direct_abstract_declarator:
   [direct_abstract_declarator] "(" param_decl_clause ")" \
      [cv_qualifier_seq] [exception_specification]

   [direct_abstract_declarator] "[" [const_expr] "]"
   "(" abstract_declarator ")"
param_decl_clause:
   [param_decl_list] ["..."]
   param_decl_list "," "..."
param_decl_list:
   param_decl
   param_decl_list "," param_decl
param_decl:
   decl_spec_seq declarator
   decl_spec_seq declarator "=" assign_expr
   decl_spec_seq [abstract_declarator]
   decl_spec_seq [abstract_declarator] "=" assign_expr
func_def:
   [decl_spec_seq] declarator [ctor_initzer] func_body
   [decl_spec_seq] declarator func_try_block
func_body:
   compound_stmt
initzer:
   "=" initzer_clause
   "(" expr_list ")"
initzer_clause:
   assign_expr
   "{" initzer_list [","] "}"
   "{" "}"
initzer_list:
   initzer_clause
   initzer_list "," initzer_clause

Classes
-------

class_name:
   ident
   templ_id
class_spec:
   class_head "{" [member_specification] "}"
class_head:
   class_key [ident] [base_clause]
   class_key nested_name_spec ident [base_clause]
   class_key [nested_name_spec] templ_id 
     [base_clause]
class_key:
   "class"
   "struct"
   "union"
member_specification:
   member_declaration [member_specification]
   access_spec ":" [member_specification]
member_declaration:
   [decl_spec_seq] [member_declarator_list] ";"
   func_def [";"] [qualfd_id ";"]  ????
   ["::"] nested_name_spec ["template"] unqualfd_id ";"
   using_declaration
   templ_decl
member_declarator_list:
   member_declarator
   member_declarator_list "," member_declarator
member_declarator:
   declarator [pure_spec]
   declarator [const_initzer]
   [ident] ":" const_expr
pure_spec:
    "=" "0"
const_initzer:
    "=" const_expr

Derived classes
---------------

base_clause:
   ":" base_spec_list
base_spec_list:
   base_spec
   base_spec_list "," base_spec
base_spec:
   ["::"] [nested_name_spec] class_name
   "virtual" [access_spec] ["::"] [nested_name_spec] class_name
   access_spec ["virtual"] ["::"] [nested_name_spec] class_name
access_spec:
   "private"
   "protected"
   "public"

Special Member Funcs
------------------------

conversion_func_id:
   "operator" conversion_type_id
conversion_type_id:
   type_spec_seq [conversion_declarator]
conversion_declarator:
   ptr_operator [conversion_declarator]
ctor_initzer:
   ":" mem_initzer_list
mem_initzer_list:
   mem_initzer
   mem_initzer "," mem_initzer_list
mem_initzer:
   mem_initzer_id "(" [expr_list] ")"
mem_initzer_id:
   ["::"] [nested_name_spec] class_name
   ident

Overloading
-----------

operator_func_id:
   "operator" operator
operator: one of
   "and" "or"
   "new"  "delete"  "new[]"  "delete[]"
   "+"  "_"  "*"  "/"  "%"  "^"  "&"  "|"  "~"
   "!"  "="  "<"  ">"  "+="  "-="  "*="  "/="  "%="
   "^="  "&="  "|="  "<<"  ">>"  ">>="  "<<="  "=="  "!="
   "<="  ">="  "&&"  "||"  "++"  "--"   ","   "->*"  "->"
   "()"  "[]"

Templs
---------

templ_decl:
   [export] "template" "<" templ_param_list ">" declaration
templ_param_list:
   templ_param
   templ_param_list "," templ_param
templ_param:
   type_param
   param_decl
type_param:
   "class" [ident]
   "class" [ident] "=" type_id
   "typename" [ident]
   "typename" [ident] "=" type_id
   "template" "<" templ_param_list ">" "class" [ident] \
      ["=" templ_name]

templ_id:
   templ_name "<" [templ_arg_list] ">"
templ_name:
   ident
templ_arg_list:
   templ_arg
   templ_arg_list "," templ_arg
templ_arg:
   assign_expr
   type_id
   templ_name
explicit_instantiation:
   "template" declaration
explicit_specialization:
   "template" "<" ">" declaration

Exception Handling
------------------

try_block:
    "try" compound_stmt handler_seq
func_try_block:
    "try" [ctor_initzer] func_body handler_seq
handler_seq:
   handler [handler_seq]
handler:
   "catch" "(" exception_declaration ")" compound_stmt
exception_declaration:
   type_spec_seq declarator
   type_spec_seq abstract_declarator
   type_spec_seq
   "..."
throw_expr:
   "throw" [assign_expr]
exception_specification:
   "throw" "(" [type_id_list] ")"
type_id_list:
   type_id
   type_id_list "," type_id

Preprocessing Directives
------------------------

preprocessing_file:
   [group]
group:
   group_part
   group group_part
group_part:
   [pp_tokens] new_line
   if_section
   control_line
if_section:
   if_group [elif_groups] [else_group] endif_line
if_group:
   "#" "if" const_expr new_line [group]
   "#" "ifdef" ident new_line [group]
   "#" "ifndef" ident new_line [group]
elif_groups:
   elif_group
   elif_groups elif_group
elif_group:
   "#" "elif" const_expr new_line [group]
else_group:
   "#" "else" new_line [group]
endif_line:
   "#" "endif" new_line
control_line:
   "#" "include" pp_tokens new_line
   "#" "define" ident replacement_list new_line
   "#" "define" ident lparen [ident_list] ")" 
     replacement_list new_line
   "#" "undef" ident new_line
   "#" "line" pp_tokens new_line
   "#" "error" [pp_tokens] new_line
   "#" "pragma" [pp_tokens] new_line
   "#" new_line
lparen:
   the '(' char without preceding white_space
replacement_list:
   [pp_tokens]
pp_tokens:
   preprocessing_token
   pp_tokens preprocessing_token
new_line:
   the new_line char 
ident_list:
   ident
   ident_list "," ident
